유닉스 명령어 :
	cd (디렉토리) : 디렉토리 이동
	ls : 디렉토리의 파일 보여줌
	cat (파일) : 파일 출력
	mkdir (디렉토리) : 디렉토리를 새로 만든다

GIT 명령어 (git + ) :
	init : 실행한 위치를 git 저장소로 초기화
	add (파일이름) : 해당 파일을 git이 추적할 수 있게 저장소에 추가 (add . <-모두추가)
	commit : 변경된 파일을 저장소에 제출 
		-m "메세지" : 간편 커밋메세지
		-a : 변경된 저장소 파일 모두 커밋
	status : 현재 저장소의 상태 출력

	branch (이름) : (이름)의 브랜치를 만든다
	checkout (브랜치이름) : 작업중인 브랜치를 변경
	merge (브랜치이름) : 현재 작업중인 브랜치에 해당브랜치를 끌어와 병합

	clone (주소) : 원격저장소의(이하 깃헙) 내용을 로컬로 복사
	remote : 로컬과 깃헙을 연결 
		git remote add (저장소별칭) (주소)
		 -v : 연결확인
	push (깃헙) (브랜치) : 로컬의 내용을 깃헙으로 보냄
		--all : 로컬의 모든 브랜치를 푸시함 (브랜치명을 생략하고 사용)
	fetch : 로컬과 깃헙의 변경사항이 다를 때, 이를 비교, 대조
	pull (깃헙) (브랜치) : 깃헙의 최신내용을 로컬로 가져오면서 병합

(1) .gitignore : 불필요한 파일 및 폴더를 무시하게끔 해주는 정보를 가진 파일
	       http://www.gitignore.io/ 에서 다운받을 수 있음
(2) 브랜치별 상황을 볼 수 있는 그래프 (github -> repository -> insight -> network)

고급 git 명령어 :
	log : 커밋했던 로그들을 볼 수 있음 (-1 , -2.. 를 이용해서 최근이나 몇번 전 커밋만 볼 수 있음)
	tag : 커밋을 참조하기 쉽도록 알기쉬운 이름을 붙임 (커밋 앞에 태그가 붙음)
		-1 : 현재 저장소에 있는 태그 리스트
	commit --amend : 같은 브랜치상의 최종커밋을 취소하고, 새로운 내용이나 설명을 덧붙일 수 있음	
	revert : 이전에 작성한 커밋을 지움 (지운 내역을 남겨둠)
		git revert (SHA-1체크섬)
	reset : 커밋을 버리고 이전의 특정버전으로 되돌림. (지운 내역을 남기지 않음)
	checkout HEAD --filename : 특정 파일을 최종 커밋시점으로 되돌리기
	rebase : 병합할때 사용, 브랜치가 많을 경우 이력을 확인하면서 병합.
